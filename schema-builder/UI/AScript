#!/bin/bash

# A script that compares your local branch to a remote branch.
# It lists any new words between the branches and git logs for every commit made.
# It needs to be run in your Git repo directory.
# It can be run with no arguments - in this case it compares your current local branch against origin/<local_branch_name>. To do this you must have already pushed your local branch up to the origin.
# Alternatively you can specify the remote branch to use as the first argument: AScript <origin_branch_name>
# And you then optionally also provide a local branch name to use: AScript <origin_branch_name> <local_branch_name>

function extractNewWords {
	perl -ne 'print join("\n", split(/(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|[ \W_]/,$_));print("\n")' ~/currentLines.txt | tr '[:upper:]' '[:lower:]' | sort -u > ~/currentWords.txt
	newWords=`comm -13 ~/previousWords.txt ~/currentWords.txt | grep -vf ~/allCommitIds.txt || true`
	echo $newWords | tr ' ' '\n'  >> ~/previousWords.txt
	cat ~/previousWords.txt | sort -u > ~/newPreviousWords.txt
	mv ~/newPreviousWords.txt ~/previousWords.txt
}

set -e

# Get current branch so we can switch back to it at the end
currentBranch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')

if [[ -z $2 ]]
then
    localBranch=$currentBranch
else
    localBranch=$2
fi

if [[ -z $1 ]]
then
    originBranch=origin/$localBranch
else
    originBranch=$1
fi

echo "Local branch = $localBranch"
echo "Origin branch = $originBranch"

# Get origin words
git checkout -q $originBranch
git log --reverse --pretty=format:"%H" > ~/previousCommitIds.txt

# extract commit ids between local and origin branches
git checkout -q $localBranch
git log --reverse --pretty=format:"%H" > ~/currentCommitIds.txt

newCommitIds=`grep -vf ~/previousCommitIds.txt ~/currentCommitIds.txt` || true
echo "New commits:"
echo $newCommitIds | tr ' ' '\n'
rm ~/previousCommitIds.txt ~/currentCommitIds.txt

# add commit ids to file so they can be ignored in the diff
git log --pretty=format:"%h %H" | tr ' ' '\n' | sort -u > ~/allCommitIds.txt

ignoreIds=""
echo "" > ~/previousWords.txt
for id in $newCommitIds
do 
	commitMsg=`git log --pretty=format:"%s" -n 1 $id`
	printf "\nChecking commit $id: $commitMsg\n" 

	# Load parent commit words
	ignoreIds="$ignoreIds $id"
	for parentId in `git rev-list --parents -n 1 $id`
	do
		if ! [[ ${ignoreIds[*]} =~ $parentId ]]
		then
			ignoreIds="$ignoreIds $parentId"
		    git checkout -q $parentId
		    git log > ~/currentLines.txt
		    git ls-files | xargs cat >> ~/currentLines.txt
			extractNewWords
		fi
	done

	git checkout -q $id
	git log > ~/currentLines.txt
	git diff --name-only HEAD~ HEAD | xargs cat &>/dev/null >> ~/currentLines.txt || true 
	extractNewWords
	echo "New words:"
    echo $newWords | tr ' ' '\n'
    echo $newWords | tr ' ' '\n' > ~/newWords.txt
    
	rm ~/currentLines.txt
	rm ~/currentWords.txt
done

rm ~/previousWords.txt
rm ~/allCommitIds.txt
git checkout -q ${currentBranch}

