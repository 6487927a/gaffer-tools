AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys the Gaffer Road Traffic example application"

Parameters:

  GafferVersion:
    Type: String
    Default: 1.0.0
    MinLength: 1
    AllowedPattern: "\\S+"
    Description: The version of Gaffer to deploy - can be a version number (e.g. 1.0.0) or a git branch (e.g. gh-X-feature-name) / commit hash etc

  GafferToolsVersion:
    Type: String
    Default: 1.0.0
    MinLength: 1
    AllowedPattern: "\\S+"
    Description: The version of Gaffer Tools to use to deploy Gaffer on EMR - can be a version number (e.g. 1.0.0) or a git branch (e.g. gh-X-feature-name) / commit hash etc

  AccumuloVersion:
    Type: String
    Default: 1.8.1
    MinLength: 1
    AllowedPattern: "\\S+"

  EmrRelease:
    Type: String
    Default: emr-5.7.0
    AllowedValues:
      - emr-5.7.0
    ConstraintDescription: Please select a valid EMR release

  EmrInstanceType:
    Type: String
    Default: m3.xlarge
    MinLength: 1
    Description: Specify the type of instances to deploy in the EMR cluster

  EmrCoreInstanceCount:
    Type: Number
    Default: 3
    MinValue: 0
    Description: The number of (core) instances to deploy as part of the EMR cluster

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to deploy infrastructure into

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The subnet to deploy infrastructure into. Make sure the subnet resides in the VPC you have selected above!

  ExtraSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Additional security groups that instances should be a member of

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair that you would like to be able to use to SSH into any instances
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  WebInstanceType:
    Type: String
    Default: t2.small
    MinLength: 1
    Description: Specify the type of instance to be used to deploy the Gaffer REST API and Web UI

  RoadTrafficDataUrl:
    Type: String
    Default: https://raw.githubusercontent.com/gchq/Gaffer/master/example/road-traffic/road-traffic-demo/src/main/resources/roadTrafficSampleData.csv
    AllowedValues:
      - http://data.dft.gov.uk/gb-traffic-matrix/Raw_count_data_major_roads.zip
      - https://raw.githubusercontent.com/gchq/Gaffer/master/example/road-traffic/road-traffic-demo/src/main/resources/roadTrafficSampleData.csv
    Description: The link to the GB Road Traffic Counts data that should be imported into the Gaffer graph

  GafferSchemaJarUrl:
    Type: String
    Default: https://repo1.maven.org/maven2/uk/gov/gchq/gaffer/road-traffic-model/1.0.0/road-traffic-model-1.0.0.jar
    MinLength: 1
    Description: A URL that can be used to download a JAR which contains the schema for your Gaffer graph i.e. json files in a 'schema' directory
    AllowedPattern: "https?://\\S+\\.jar"
    ConstraintDescription: Please make sure this is a http / https URL

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Versions
        Parameters:
          - GafferVersion
          - GafferToolsVersion
          - AccumuloVersion
          - EmrRelease
      - Label:
          default: Gaffer Config
        Parameters:
          - RoadTrafficDataUrl
          - GafferSchemaJarUrl
      - Label:
          default: Infrastructure Config
        Parameters:
          - EmrInstanceType
          - EmrCoreInstanceCount
          - WebInstanceType
          - VpcId
          - SubnetId
          - KeyName
          - ExtraSecurityGroups

Resources:

  GafferWithWeb:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/", Ref: S3Bucket, "/", !GetAtt FileUploadCustomResource.DeployGafferWithWebStack]]
      Parameters:
        GafferVersion: !Ref GafferVersion
        GafferToolsVersion: !Ref GafferToolsVersion
        AccumuloVersion: !Ref AccumuloVersion
        EmrRelease: !Ref EmrRelease
        EmrInstanceType: !Ref EmrInstanceType
        EmrCoreInstanceCount: !Ref EmrCoreInstanceCount
        VpcId: !Ref VpcId
        SubnetId: !Ref SubnetId
        ExtraSecurityGroups: !Join [",", Ref: ExtraSecurityGroups]
        KeyName: !Ref KeyName
        ManageSecurityGroups: false
        GafferInstanceName: road_traffic
        GraphId: road_traffic
        UserName: road_traffic_user
        WebInstanceType: !Ref WebInstanceType
        GafferSchemaJarUrl: !Ref GafferSchemaJarUrl

  #################################
  ## EMR step script to ingest data
  #################################

  WaitForDataIngestCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref WaitForDataIngestHandler
      Timeout: 3600

  WaitForDataIngestHandler:
    Type: AWS::CloudFormation::WaitConditionHandle
    DependsOn: GafferWithWeb

  IngestData:
    Type: AWS::EMR::Step
    Properties:
      JobFlowId: !Sub ${GafferWithWeb.Outputs.EmrClusterId}
      Name: ingest-road-traffic-data
      HadoopJarStep:
        Jar: s3://elasticmapreduce/libs/script-runner/script-runner.jar
        Args:
          - !Join ["", ["s3://", !Ref S3Bucket, "/", !GetAtt FileUploadCustomResource.IngestRoadTrafficDataScript]]
          - !Ref RoadTrafficDataUrl
          - "-g"
          - !Ref GafferVersion
          - "-i"
          - !Sub ${GafferWithWeb.Outputs.AccumuloInstanceName}
          - "--id"
          - !Sub ${GafferWithWeb.Outputs.GraphId}
          - "-k"
          - !Sub ${GafferWithWeb.Outputs.PasswordEncryptionKey}
          - "-p"
          - !Sub ${GafferWithWeb.Outputs.PasswordParameter}
          - "-u"
          - !Sub ${GafferWithWeb.Outputs.UserName}
          - "-z"
          - !Sub ${GafferWithWeb.Outputs.EmrMasterPublicDNS}
          - "-w"
          - !Ref WaitForDataIngestHandler
      ActionOnFailure: CANCEL_AND_WAIT

  ##############################
  ## Upload dependencies into S3
  ##############################

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  FileUploadCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt FileUploadLambda.Arn
      BucketName: !Ref S3Bucket

  FileUploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Uploads files required to deploy Gaffer Road Traffic example application to an S3 bucket
      Role: !GetAtt FileUploadRole.Arn
      Runtime: python2.7
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 180
      Code:
        ZipFile: !Sub |
          #!/usr/bin/env python

          import boto3
          import base64
          import urllib2
          import cfnresponse

          s3 = boto3.client('s3')

          files=[]

          files.append({
            'Output': 'DeployGafferWithWebStack',
            'Key': 'cloudformation/gaffer-with-web.yaml',
            'Urls': [
              'https://raw.githubusercontent.com/gchq/gaffer-tools/gaffer-tools-${GafferToolsVersion}/deployment/aws/core/cloudformation/gaffer-with-web.yaml',
              'https://raw.githubusercontent.com/gchq/gaffer-tools/${GafferToolsVersion}/deployment/aws/core/cloudformation/gaffer-with-web.yaml'
            ]
          })

          files.append({
            'Output': 'IngestRoadTrafficDataScript',
            'Key': 'step/ingest-road-traffic-data.sh',
            'Urls': [
              'https://raw.githubusercontent.com/gchq/gaffer-tools/gaffer-tools-${GafferToolsVersion}/deployment/aws/apps/road-traffic/emr-step-scripts/ingest-road-traffic-data.sh',
              'https://raw.githubusercontent.com/gchq/gaffer-tools/${GafferToolsVersion}/deployment/aws/apps/road-traffic/emr-step-scripts/ingest-road-traffic-data.sh'
            ]
          })

          def upload_files(bucket):
            outputs = {}

            for file in files:
              body = None
              if 'Body' in file:
                body = file['Body']
              elif 'Body64' in file:
                body = base64.b64decode(file['Body64'])
              elif 'Url' in file:
                body = urllib2.urlopen(file['Url']).read()
              elif 'Urls' in file:
                lastError = None
                for url in file['Urls']:
                  try:
                    body = urllib2.urlopen(url).read()
                    break
                  except Exception as e:
                    print('Request for ' + url + ' error: ' + str(e))
                    lastError = e
                if body is None and lastError is not None:
                  raise lastError

              if body is not None:
                s3.put_object(
                  Bucket=bucket,
                  Key=file['Key'],
                  Body=body
                )

                if 'Output' in file:
                  outputs[file['Output']] = file['Key']

            return outputs

          def cleanup_files(bucket):
            for file in files:
              s3.delete_object(
                Bucket=bucket,
                Key=file['Key']
              )

          def lambda_handler(evt, cntx):
            try:
              print(evt)

              bucket = evt['ResourceProperties']['BucketName']
              print('S3 Bucket: ' + bucket)

              requestType = evt['RequestType']
              if requestType == 'Create' or requestType == 'Update':
                outputs = upload_files(bucket)
                cfnresponse.send(evt, cntx, cfnresponse.SUCCESS, outputs)
              elif requestType == 'Delete':
                cleanup_files(bucket)
                cfnresponse.send(evt, cntx, cfnresponse.SUCCESS, {})
              else:
                raise Exception('Unrecognised RequestType: ' + requestType)

            except Exception as e:
              cfnresponse.send(evt, cntx, cfnresponse.FAILED, { 'Error': str(e) })
              raise

  FileUploadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Join ["-", [Ref: "AWS::StackName", "file-upload-policy"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !GetAtt S3Bucket.Arn
                  - !Join ["", [!GetAtt S3Bucket.Arn, "/*"]]
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject

Outputs:
  EmrMasterPublicDNS:
    Value: !Sub ${GafferWithWeb.Outputs.EmrMasterPublicDNS}
  EmrClusterId:
    Value: !Sub ${GafferWithWeb.Outputs.EmrClusterId}
  AccumuloInstanceName:
    Value: !Sub ${GafferWithWeb.Outputs.AccumuloInstanceName}
  GraphId:
    Value: !Sub ${GafferWithWeb.Outputs.GraphId}
  UserName:
    Value: !Sub ${GafferWithWeb.Outputs.UserName}
  PasswordParameter:
    Value: !Sub ${GafferWithWeb.Outputs.PasswordParameter}
  PasswordEncryptionKey:
    Value: !Sub ${GafferWithWeb.Outputs.PasswordEncryptionKey}
  WebServerPublicDNS:
    Value: !Sub ${GafferWithWeb.Outputs.WebServerPublicDNS}
  RestApi:
    Value: !Sub ${GafferWithWeb.Outputs.RestApi}
  WebUi:
    Value: !Sub ${GafferWithWeb.Outputs.WebUi}
